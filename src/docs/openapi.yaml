openapi: 3.0.0
info:
  title: Opensea API
  description: API documentation for accessing collections from Opensea.
  version: "1.0.0"

servers:
  - url: https://nfttools.pro/ospro
tags:
  - name: Collections
    description: The collections endpoint allows you to retrieve detailed information about various collections available on Opensea.
  - name: Tokens
    description: The tokens endpoint allows you to retrieve detailed information about various tokens available on Opensea.
  - name: Users
    description: The users endpoint allows you to retrieve and manage user account information on Opensea.

security:
  - ApiKeyAuth: []
paths:
  /collections:
    get:
      tags:
        - Collections
      summary: Get Collections
      description: Retrieve a list of collections with specific fields, sorting, and filtering.
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set.
          required: false
          example: 0
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of items to return.
          required: false
          example: 50
        - in: query
          name: fields[createdDate]
          schema:
            type: integer
          description: Include the created date field.
          required: false
          example: 1
        - in: query
          name: fields[createdAt]
          schema:
            type: integer
          description: Include the created at field.
          required: false
          example: 1
        - in: query
          name: fields[name]
          schema:
            type: integer
          description: Include the name field.
          required: false
          example: 1
        - in: query
          name: fields[address]
          schema:
            type: integer
          description: Include the address field.
          required: false
          example: 1
        - in: query
          name: fields[addresses]
          schema:
            type: integer
          description: Include the addresses field.
          required: false
          example: 1
        - in: query
          name: fields[imageUrl]
          schema:
            type: integer
          description: Include the image URL field.
          required: false
          example: 1
        - in: query
          name: fields[isVerified]
          schema:
            type: integer
          description: Include the is verified field.
          required: false
          example: 1
        - in: query
          name: fields[slug]
          schema:
            type: integer
          description: Include the slug field.
          required: false
          example: 1
        - in: query
          name: fields[stats.floor_price]
          schema:
            type: integer
          description: Include the floor price field.
          required: false
          example: 1
        - in: query
          name: fields[stats.items_listed]
          schema:
            type: integer
          description: Include the items listed field.
          required: false
          example: 1
        - in: query
          name: fields[stats.num_owners]
          schema:
            type: integer
          description: Include the number of owners field.
          required: false
          example: 1
        - in: query
          name: fields[stats.total_supply]
          schema:
            type: integer
          description: Include the total supply field.
          required: false
          example: 1
        - in: query
          name: fields[stats.one_day_change]
          schema:
            type: integer
          description: Include the one-day change field.
          required: false
          example: 1
        - in: query
          name: fields[stats.one_day_difference]
          schema:
            type: integer
          description: Include the one-day difference field.
          required: false
          example: 1
        - in: query
          name: fields[stats.one_day_sales]
          schema:
            type: integer
          description: Include the one-day sales field.
          required: false
          example: 1
        - in: query
          name: fields[stats.one_day_sales_change]
          schema:
            type: integer
          description: Include the one-day sales change field.
          required: false
          example: 1
        - in: query
          name: fields[stats.one_day_volume]
          schema:
            type: integer
          description: Include the one-day volume field.
          required: false
          example: 1
        - in: query
          name: fields[stats.rolling_one_day_change]
          schema:
            type: integer
          description: Include the rolling one-day change field.
          required: false
          example: 1
        - in: query
          name: fields[stats.rolling_one_day_sales]
          schema:
            type: integer
          description: Include the rolling one-day sales field.
          required: false
          example: 1
        - in: query
          name: fields[stats.rolling_one_day_sales_change]
          schema:
            type: integer
          description: Include the rolling one-day sales change field.
          required: false
          example: 1
        - in: query
          name: fields[stats.rolling_one_day_volume]
          schema:
            type: integer
          description: Include the rolling one-day volume field.
          required: false
          example: 1
        - in: query
          name: fields[stats.top_offer_price]
          schema:
            type: integer
          description: Include the top offer price field.
          required: false
          example: 1
        - in: query
          name: fields[stats.floor_price_token_price]
          schema:
            type: integer
          description: Include the floor price token price field.
          required: false
          example: 1
        - in: query
          name: fields[stats.floor_price_token_address]
          schema:
            type: integer
          description: Include the floor price token address field.
          required: false
          example: 1
        - in: query
          name: fields[stats.floor_price_token_decimals]
          schema:
            type: integer
          description: Include the floor price token decimals field.
          required: false
          example: 1
        - in: query
          name: fields[stats.floor_price_token_symbol]
          schema:
            type: integer
          description: Include the floor price token symbol field.
          required: false
          example: 1
        - in: query
          name: fields[chainName]
          schema:
            type: integer
          description: Include the chain name field.
          required: false
          example: 1
        - in: query
          name: fields[stats.floor_price_1d]
          schema:
            type: integer
          description: Include the floor price 1-day field.
          required: false
          example: 1
        - in: query
          name: sort[stats.rolling_one_day_volume]
          schema:
            type: integer
          description: Sort by rolling one-day volume.
          required: false
          example: -1
        - in: query
          name: filters[chainNames][]
          schema:
            type: string
          description: Filter by chain names.
          required: false
          example: ethereum
        - in: query
          name: filters[trending.top_one_day]
          schema:
            type: boolean
          description: Filter by trending top one-day.
          required: false
          example: true
      responses:
        "200":
          description: A list of collections.
        "400":
          description: Bad request.
        "500":
          description: Internal server error.

  /currencies/{currencyId}:
    get:
      summary: Get Currency Information
      description: Retrieve detailed information about a specific currency by its ID.
      parameters:
        - in: path
          name: currencyId
          schema:
            type: string
          description: The ID of the currency to retrieve information for.
          required: true
          example: ETH
      responses:
        "200":
          description: Currency information retrieved successfully.
        "400":
          description: Bad request. Invalid currency ID supplied.
        "404":
          description: Not found. Currency not found.
        "500":
          description: Internal server error.

  /account/{walletAddress}/profile:
    get:
      tags:
        - Users
      summary: Get User Profile
      description: Retrieve detailed profile information for a specific user account by its ID.
      parameters:
        - in: path
          name: walletAddress
          schema:
            type: string
          description: The ID of the user account to retrieve profile information for.
          required: true
          example: "0x9adcFFff1DEf95F7E58B587c1A6B06Ac6A7aE1E5"
      responses:
        "200":
          description: User profile information retrieved successfully.
        "400":
          description: Bad request. Invalid account ID supplied.
        "404":
          description: Not found. User account not found.
        "500":
          description: Internal server error.

  /account/{walletAddress}/watchlist:
    get:
      tags:
        - Users
      summary: Get User Watchlist
      description: Retrieve the watchlist information for a specific user account, including NFTs, collections, and other items they are watching.
      parameters:
        - in: path
          name: walletAddress
          schema:
            type: string
          description: The ID of the user account to retrieve watchlist information for.
          required: true
          example: "0x9adcFFff1DEf95F7E58B587c1A6B06Ac6A7aE1E5"
        - in: query
          name: limit
          schema:
            type: integer
            description: The maximum number of items to return.
            example: 50
        - in: query
          name: slug
          schema:
            type: array
            items:
              type: string
            description: The slugs of the items or collections to filter the watchlist.
            example:
              - mocaverse
              - pudgypenguins
              - milady
              - boredapeyachtclub
              - mutant-ape-yacht-club
              - remilio-babies
              - memelandcaptainz
              - azuki
              - lilpudgys
              - cryptopunks
              - orbitjh
              - memelandpotatoz
              - doodles-official
              - matr1x-kuku
              - nouns
              - chromie-squiggle-by-snowfro
              - piratenation
              - official-v1-punks
              - qbx-genesis-nft
              - azukielementals
              - forgottenruneswizardscult
              - sxtcommunitynft-v2
              - beanzofficial
              - vera-molnar-themes-and-variations
              - azragames-thehopeful
              - tennis-champs-genesis
              - mocaverse-lucky-neko
              - today-ancient-seed
              - forgotten-runiverse-watchers-rings
              - chubbit-official-collection-14
              - persona
              - brx-dex
              - chimpersnft
              - sxtcommunity
              - degods-eth
              - azukielementalbeans
              - berachain-bit-bears
              - sxtcommunitynft
              - kanpai-pandas
              - theundeadnft
              - clonex
              - proof-moonbirds
              - palioai-aura
              - chronosworlds-travelers-3
              - old-vibes
              - overworld-incarna
              - bored-ape-kennel-club
              - sappy-seals
              - yogapetz
              - acclimatedmooncats
      responses:
        "200":
          description: Watchlist information retrieved successfully.
        "400":
          description: Bad request. Invalid request parameters.
        "404":
          description: Not found. User account or watchlist not found.
        "500":
          description: Internal server error.

  /owned/{walletAddress}/erc20:
    post:
      tags:
        - Users
      summary: Get ERC20 Tokens Owned by Account
      description: Retrieve the ERC20 tokens owned by a specific user account.
      parameters:
        - in: path
          name: walletAddress
          schema:
            type: string
          description: The ID of the user account to retrieve ERC20 token information for.
          required: true
          example: "0x9adcFFff1DEf95F7E58B587c1A6B06Ac6A7aE1E5"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chain:
                  type: string
                  description: The blockchain network to retrieve token information from.
                  example: eth
      responses:
        "200":
          description: ERC20 token information retrieved successfully.
        "400":
          description: Bad request. Invalid account ID or request body supplied.
        "404":
          description: Not found. User account or tokens not found.
        "500":
          description: Internal server error.
  /collections/{slug}/watchlistCount:
    get:
      tags:
        - Collections
      summary: Get Watchlist Count for Collection
      description: Retrieve the count of users who have added a specific NFT collection to their watchlist.
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          description: The slug of the NFT collection to retrieve watchlist count for.
          required: true
          example: mocaverse
      responses:
        "200":
          description: Watchlist count retrieved successfully.
        "400":
          description: Bad request. Invalid collection slug supplied.
        "404":
          description: Not found. Collection not found.
        "500":
          description: Internal server error.
  /collections/{collectionAddress}/minting:
    get:
      tags:
        - Collections
      summary: Get Minting Information for Collection
      description: Retrieve minting information for a specific NFT collection.
      parameters:
        - in: path
          name: collectionAddress
          schema:
            type: string
          description: The address of the NFT collection to retrieve minting information for.
          required: true
          example: "0x59325733eb952a92e069c87f0a6168b29e80627f"
      responses:
        "200":
          description: Minting information retrieved successfully.
        "400":
          description: Bad request. Invalid collection address supplied.
        "404":
          description: Not found. Collection not found.
        "500":
          description: Internal server error.

  /collections/{slug}:
    get:
      tags:
        - Collections
      summary: Get Collection Information
      description: Retrieve detailed information about a specific NFT collection.
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          description: The slug of the NFT collection to retrieve information for.
          required: true
          example: mocaverse
        - in: query
          name: fields[name]
          schema:
            type: integer
            example: 1
          description: Include the name of the collection in the response.
        - in: query
          name: fields[marketStats]
          schema:
            type: integer
            example: 1
          description: Include market statistics of the collection in the response.
        - in: query
          name: fields[addresses]
          schema:
            type: integer
            example: 1
          description: Include addresses associated with the collection in the response.
        - in: query
          name: fields[address]
          schema:
            type: integer
            example: 1
          description: Include the main address of the collection in the response.
        - in: query
          name: fields[revealPercentage]
          schema:
            type: integer
            example: 1
          description: Include the reveal percentage of the collection in the response.
        - in: query
          name: fields[rarityRankingStatus]
          schema:
            type: integer
            example: 1
          description: Include the rarity ranking status of the collection in the response.
        - in: query
          name: fields[description]
          schema:
            type: integer
            example: 1
          description: Include the description of the collection in the response.
        - in: query
          name: fields[bannerImageUrl]
          schema:
            type: integer
            example: 1
          description: Include the banner image URL of the collection in the response.
        - in: query
          name: fields[imageUrl]
          schema:
            type: integer
            example: 1
          description: Include the image URL of the collection in the response.
        - in: query
          name: fields[sevenDayVolume]
          schema:
            type: integer
            example: 1
          description: Include the seven-day volume of the collection in the response.
        - in: query
          name: fields[openSeaFees]
          schema:
            type: integer
            example: 1
          description: Include the OpenSea fees of the collection in the response.
        - in: query
          name: fields[fees]
          schema:
            type: integer
            example: 1
          description: Include the fees of the collection in the response.
        - in: query
          name: fields[traits]
          schema:
            type: integer
            example: 1
          description: Include the traits of the collection in the response.
        - in: query
          name: fields[standard]
          schema:
            type: integer
            example: 1
          description: Include the standard of the collection in the response.
        - in: query
          name: fields[nftxFees]
          schema:
            type: integer
            example: 1
          description: Include the NFTX fees of the collection in the response.
        - in: query
          name: fields[discordUrl]
          schema:
            type: integer
            example: 1
          description: Include the Discord URL of the collection in the response.
        - in: query
          name: fields[mediumUsername]
          schema:
            type: integer
            example: 1
          description: Include the Medium username of the collection in the response.
        - in: query
          name: fields[createdAt]
          schema:
            type: integer
            example: 1
          description: Include the creation date of the collection in the response.
        - in: query
          name: fields[telegramUrl]
          schema:
            type: integer
            example: 1
          description: Include the Telegram URL of the collection in the response.
        - in: query
          name: fields[twitterUsername]
          schema:
            type: integer
            example: 1
          description: Include the Twitter username of the collection in the response.
        - in: query
          name: fields[restrictedMarketplaces]
          schema:
            type: integer
            example: 1
          description: Include restricted marketplaces information of the collection in the response.
        - in: query
          name: fields[stats.floor_price]
          schema:
            type: integer
            example: 1
          description: Include the floor price statistics of the collection in the response.
        - in: query
          name: fields[stats.items_listed]
          schema:
            type: integer
            example: 1
          description: Include the number of items listed statistics of the collection in the response.
        - in: query
          name: fields[stats.num_owners]
          schema:
            type: integer
            example: 1
          description: Include the number of owners statistics of the collection in the response.
        - in: query
          name: fields[stats.total_supply]
          schema:
            type: integer
            example: 1
          description: Include the total supply statistics of the collection in the response.
        - in: query
          name: fields[stats.rolling_one_day_sales_change]
          schema:
            type: integer
            example: 1
          description: Include the rolling one-day sales change statistics of the collection in the response.
        - in: query
          name: fields[stats.rolling_one_day_change]
          schema:
            type: integer
            example: 1
          description: Include the rolling one-day change statistics of the collection in the response.
        - in: query
          name: fields[stats.rolling_one_day_volume]
          schema:
            type: integer
            example: 1
          description: Include the rolling one-day volume statistics of the collection in the response.
        - in: query
          name: fields[stats.rolling_one_day_sales]
          schema:
            type: integer
            example: 1
          description: Include the rolling one-day sales statistics of the collection in the response.
        - in: query
          name: fields[stats.farmerOwnedAssets]
          schema:
            type: integer
            example: 1
          description: Include the farmer owned assets statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_1m]
          schema:
            type: integer
            example: 1
          description: Include the one minute floor price statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_5m]
          schema:
            type: integer
            example: 1
          description: Include the five minute floor price statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_30m]
          schema:
            type: integer
            example: 1
          description: Include the thirty minute floor price statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_1h]
          schema:
            type: integer
            example: 1
          description: Include the one hour floor price statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_6h]
          schema:
            type: integer
            example: 1
          description: Include the six hour floor price statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_1d]
          schema:
            type: integer
            example: 1
          description: Include the one day floor price statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_7d]
          schema:
            type: integer
            example: 1
          description: Include the seven day floor price statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_30d]
          schema:
            type: integer
            example: 1
          description: Include the thirty day floor price statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_token_price]
          schema:
            type: integer
            example: 1
          description: Include the floor price token price statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_token_address]
          schema:
            type: integer
            example: 1
          description: Include the floor price token address statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_token_decimals]
          schema:
            type: integer
            example: 1
          description: Include the floor price token decimals statistics of the collection in the response.
        - in: query
          name: fields[stats.floor_price_token_symbol]
          schema:
            type: integer
            example: 1
          description: Include the floor price token symbol statistics of the collection in the response.
        - in: query
          name: fields[instagramUsername]
          schema:
            type: integer
            example: 1
          description: Include the Instagram username of the collection in the response.
        - in: query
          name: fields[totalSupply]
          schema:
            type: integer
            example: 1
          description: Include the total supply of the collection in the response.
        - in: query
          name: fields[wikiUrl]
          schema:
            type: integer
            example: 1
          description: Include the wiki URL of the collection in the response.
        - in: query
          name: fields[slug]
          schema:
            type: integer
            example: 1
          description: Include the slug of the collection in the response.
        - in: query
          name: fields[createdDate]
          schema:
            type: integer
            example: 1
          description: Include the creation date of the collection in the response.
        - in: query
          name: fields[isVerified]
          schema:
            type: integer
            example: 1
          description: Include whether the collection is verified in the response.
        - in: query
          name: fields[ranksUpdatedAt]
          schema:
            type: integer
            example: 1
          description: Include the ranks updated date of the collection in the response.
        - in: query
          name: fields[externalUrl]
          schema:
            type: integer
            example: 1
          description: Include the external URL of the collection in the response.
        - in: query
          name: fields[updatedAt]
          schema:
            type: integer
            example: 1
          description: Include the update date of the collection in the response.
        - in: query
          name: fields[isOpenRarityEnabled]
          schema:
            type: integer
            example: 1
          description: Include whether OpenRarity is enabled for the collection in the response.
        - in: query
          name: fields[isCollectionOffersEnabled]
          schema:
            type: integer
            example: 1
          description: Include whether collection offers are enabled in the response.
        - in: query
          name: fields[isTraitOffersEnabled]
          schema:
            type: integer
            example: 1
          description: Include whether trait offers are enabled in the response.
        - in: query
          name: fields[mintData]
          schema:
            type: integer
            example: 1
          description: Include mint data of the collection in the response.
        - in: query
          name: fields[disableMintOnOSPro]
          schema:
            type: integer
            example: 1
          description: Include whether minting on OS Pro is disabled in the response.
        - in: query
          name: fields[_id]
          schema:
            type: integer
            example: 1
          description: Include the ID of the collection in the response.
        - in: query
          name: fields[isInactive]
          schema:
            type: integer
            example: 1
          description: Include whether the collection is inactive in the response.
        - in: query
          name: fields[delistedReason]
          schema:
            type: integer
            example: 1
          description: Include the reason for delisting the collection in the response.
        - in: query
          name: fields[customData]
          schema:
            type: integer
            example: 1
          description: Include custom data of the collection in the response.
        - in: query
          name: fields[chainName]
          schema:
            type: integer
            example: 1
          description: Include the chain name of the collection in the response.
        - in: query
          name: fields[indexingStatus]
          schema:
            type: integer
            example: 1
          description: Include the indexing status of the collection in the response.
      responses:
        "200":
          description: Collection information retrieved successfully.
        "400":
          description: Bad request. Invalid collection slug supplied.
        "404":
          description: Not found. Collection not found.
        "500":
          description: Internal server error.

  /orderbook/best/collectionOffer/{slug}:
    get:
      tags:
        - Collections
      summary: Get Best Collection Offer
      description: Retrieve the best collection offer for a specific NFT collection.
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          description: The slug of the NFT collection to retrieve the best collection offer for.
          required: true
          example: mocaverse
      responses:
        "200":
          description: Best collection offer retrieved successfully.
        "400":
          description: Bad request. Invalid collection slug supplied.
        "404":
          description: Not found. Collection not found.
        "500":
          description: Internal server error.

  /collections/{slug}/sales:
    get:
      tags:
        - Collections
      summary: Get Collection Sales
      description: Retrieve the sales data for a specific collection on OpenSea.
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          description: The slug of the NFT collection to retrieve sales data for.
          required: true
          example: mocaverse
        - in: query
          name: duration
          schema:
            type: string
          description: The time duration for which to retrieve sales data.
          required: true
          example: 24_hours
        - in: query
          name: threshold
          schema:
            type: integer
          description: The minimum sales threshold to filter sales data.
          required: true
          example: 5000
      responses:
        "200":
          description: Collection sales data retrieved successfully.
        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Collection sales data not found.
        "500":
          description: Internal server error.

  /collections/{slug}/orderbook/depth:
    get:
      tags:
        - Collections
      summary: Get Orderbook Depth
      description: Retrieve the orderbook depth data for a specific collection on OpenSea.
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          description: The slug of the NFT collection to retrieve orderbook depth data for.
          required: true
          example: mocaverse
      responses:
        "200":
          description: Orderbook depth data retrieved successfully.
        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Orderbook depth data not found.
        "500":
          description: Internal server error.

  /collections/{slug}/activity:
    get:
      tags:
        - Collections
      summary: Get Collection Activity
      description: Retrieve the activity data for a specific collection on OpenSea.
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          description: The slug of the NFT collection to retrieve activity data for.
          required: true
          example: mocaverse
        - in: query
          name: type[]
          schema:
            type: array
            items:
              type: string
          description: The types of activities to include.
          example:
            [
              "sell",
              "sale",
              "bundle_sale",
              "buy",
              "sale_batch",
              "list",
              "bundle_list",
              "list_batch",
              "mint",
              "deal",
            ]
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of activity records to return.
          example: 30
        - in: query
          name: disableExpiredListings
          schema:
            type: boolean
          description: Whether to disable expired listings.
          example: true
      responses:
        "200":
          description: Collection activity data retrieved successfully.
        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Collection activity data not found.
        "500":
          description: Internal server error.

  /accountProfiles:
    get:
      tags:
        - Users
      summary: Get Account Profiles
      description: Retrieve profiles for multiple Ethereum addresses on OpenSea.
      parameters:
        - in: query
          name: address
          schema:
            type: array
            items:
              type: string
          description: Ethereum addresses for which to retrieve profiles.
          required: true
          example:
            - "0xe9d18d96b8f27c9a37d8f18199bc45546774f985"
            - "0x27ec37f465e1755036cc854aa96dd304f82213e6"
            - "0x567ebbca7c00e3a8e2367c512910a68ca004f434"
            - "0x231b405c333db6d81adeaadf4c6ff3940ea5db21"
            - "0x034ead419c7fbb63041fff33b73f519f53ee674c"
            - "0x54bce3a9fab10b1e01082a1146002d581e43890f"
            - "0x146448fb756ed766fe4f87f7a0a1d636d6de8d92"
            - "0x5e513f0f684c56e9677b4a847690f0804883277c"
            - "0xecaecfd098e9b394ab8cb1d35ef58f1ad74051d1"
            - "0xb2c151c732235f5bd25bfa49e8b281eb53e5052e"
            - "0xf277caebe87925c39afe4906251e884e5cd2127a"
            - "0x04bd5264205e878135b2769cd4afb18d28de15d4"
            - "0x2c14e832743c2b3c95cd0008797fd8650acc4775"
            - "0x2ef50c0e4e32737c2514b59ecc8f3c511368b609"
            - "0x1e4cfc9d97d49cab02a9cd42d87c873bb304eb05"
      responses:
        "200":
          description: Account profiles retrieved successfully.
        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Account profiles not found.
        "500":
          description: Internal server error.

  /trending/collections:
    get:
      tags:
        - Collections
      summary: Get trending collections on OpenSea.
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            example: 25
          description: Number of collections to retrieve (default is 25).
        - in: query
          name: chainNames
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - ethereum
                - polygon
          style: form
          explode: true
          example: ["ethereum", "polygon"]
          description: |
            Array of blockchain network names to filter trending collections.
      responses:
        "200":
          description: Trending collections retrieved successfully.

        "500":
          description: Internal server error.

  /collections/{slug}/assets:
    get:
      tags:
        - Collections
      summary: Get assets from the Mocaverse collection on OpenSea.
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          description: The slug of the NFT collection to retrieve watchlist count for.
          required: true
          example: mocaverse

        - in: query
          name: offset
          required: false
          schema:
            type: integer
            minimum: 0
          description: Offset for pagination.
        - in: query
          name: limit
          required: false
          schema:
            example: 40
            type: integer
            minimum: 20
            maximum: 100
          description: "Maximum number of assets to return (default: 20, max: 100)"
        - in: query
          name: filters[supportsWyvern]
          required: false
          schema:
            type: boolean
          description: Filter for assets that support the Wyvern protocol.
        - in: query
          name: sort[currentEthPrice]
          required: false
          schema:
            type: string
            enum: [asc, desc]
          description: Sort assets by current ETH price in ascending or descending order.

      responses:
        "200":
          description: Assets from Mocaverse collection retrieved successfully.
        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Assets not found for the provided query.
        "500":
          description: Internal server error.

  /analytics/listingPriceDistribution:
    post:
      tags:
        - Collections
      summary: Get listing price distribution analytics.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: object
                  properties:
                    slug:
                      type: string
                      example: "mocaverse"
                      description: Slug of the collection.
                    traits:
                      type: object
                      example: {}
                      description: Filter traits (optional).
                    traitsRange:
                      type: object
                      example: {}
                      description: Filter traits range (optional).
                    maxSteps:
                      type: integer
                      example: 30
                      description: Maximum number of steps for distribution (optional).
                  required:
                    - slug
      responses:
        "200":
          description: Listing price distribution analytics retrieved successfully.
        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Analytics not available for the provided collection.
        "500":
          description: Internal server error.

  /collections/{chain}/{assetContractAddress}/assets/{tokenId}:
    get:
      tags:
        - Tokens
      summary: Get details of a specific asset within a collection.
      parameters:
        - in: path
          name: chain
          required: true
          schema:
            type: string
            example: ethereum
          description: Slug of the collection.
        - in: path
          name: assetContractAddress
          required: true
          schema:
            type: string
            example: "0x59325733eb952a92e069c87f0a6168b29e80627f"
          description: Address of the asset contract.
        - in: path
          name: tokenId
          required: true
          schema:
            type: string
            example: "6016"
          description: ID of the token (asset) within the collection.
      responses:
        "200":
          description: Asset details retrieved successfully.
        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Asset or collection not found.
        "500":
          description: Internal server error.

  /opensea/assets:
    get:
      tags:
        - Tokens
      summary: Get details of specific assets.
      parameters:
        - in: query
          name: asset_contract_address
          required: true
          schema:
            type: string
            example: "0x59325733eb952a92e069c87f0a6168b29e80627f"
          description: Address of the asset contract.
        - in: query
          name: token_ids
          required: true
          schema:
            type: string
            example: "6016"
          description: Comma-separated list of token IDs.
      responses:
        "200":
          description: Asset details retrieved successfully.

        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Asset or contract not found.
        "500":
          description: Internal server error.

  /orderbook/item/offer/best/{asset_contract_address}/{token_id}:
    get:
      tags:
        - Tokens
      summary: Get the best offer for a specific NFT asset.
      parameters:
        - in: path
          name: asset_contract_address
          required: true
          schema:
            type: string
            example: "0x59325733eb952a92e069c87f0a6168b29e80627f"
          description: Address of the asset contract.
        - in: path
          name: token_id
          required: true
          schema:
            type: string
            example: "6016"
          description: ID of the specific token (NFT).
      responses:
        "200":
          description: Best offer retrieved successfully.
        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Asset or offer not found.
        "500":
          description: Internal server error.

  /collections/{slug}/assets/{token_id}/activity:
    get:
      tags:
        - Tokens
      summary: Get activity for a specific NFT asset in Mocaverse collection.
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          description: The slug of the NFT collection to retrieve watchlist count for.
          required: true
          example: mocaverse
        - in: path
          name: token_id
          required: true
          schema:
            type: string
            example: "6016"
          description: ID of the specific NFT asset within the collection.
        - in: query
          name: type
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
            example: ["sale", "list"]
          description: Types of activities to retrieve (e.g., sale, list).
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            example: 100
            default: 100
          description: Maximum number of activities to retrieve (default is 100).
      responses:
        "200":
          description: Activity retrieved successfully.
        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Asset or activity not found.
        "500":
          description: Internal server error.

  /orderbook/item/orders/sell/{asset_contract_address}/{token_id}:
    get:
      tags:
        - Tokens
      summary: Get sell orders for a specific NFT asset in Mocaverse collection.
      parameters:
        - in: path
          name: asset_contract_address
          required: true
          schema:
            type: string
            example: "0x59325733eb952a92e069c87f0a6168b29e80627f"
          description: Address of the asset contract.
        - in: path
          name: token_id
          required: true
          schema:
            type: string
            example: "6016"
          description: ID of the specific NFT asset within the collection.
      responses:
        "200":
          description: Sell orders retrieved successfully.
        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Sell orders not available for the asset.
        "500":
          description: Internal server error.

  /rarity/{asset_contract_address}/{token_id}:
    get:
      tags:
        - Tokens
      summary: Get rarity information for a specific NFT asset.
      parameters:
        - in: path
          name: asset_contract_address
          required: true
          schema:
            type: string
            example: "0x59325733eb952a92e069c87f0a6168b29e80627f"
          description: Address of the asset contract.
        - in: path
          name: token_id
          required: true
          schema:
            type: string
            example: "6016"
          description: ID of the specific NFT asset within the collection.
      responses:
        "200":
          description: Rarity information retrieved successfully.

        "400":
          description: Bad request. Invalid parameters supplied.
        "404":
          description: Not found. Rarity information not available for the asset.
        "500":
          description: Internal server error.
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-NFT-API-Key
